<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<db:config name="Database_Config" doc:name="Database Config" doc:id="b80dd6b7-21e6-4dd2-b4f3-1e60f6c8542e" >
		<db:my-sql-connection host="localhost" port="3306" user="root" database="xys_store" />
	</db:config>
	<sub-flow name="post:\customer:application\json:tp2-sl-customer-xys-config_SubFlow" doc:id="70e1fbc2-3df6-493c-be1e-7cea408e0d13" >
		<logger level="INFO" doc:name="Logger" doc:id="ac12b6ac-d7bc-4682-9a5f-d66cc4fd98f6" />
		<ee:transform doc:name="filtragem dos dados do payload do customer" doc:id="4e00f4ca-efdb-4b27-bbb2-185a50f8029f">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  name: payload.name,
  last_name: payload.last_name,
  date_of_birth: payload.date_of_birth,
  address: payload.address,
  identity_card: payload.identity_card,
  date_of_creation: now()
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<db:insert doc:name="insert na base de dados do customer" doc:id="cea3079a-802a-4629-854a-cbd8d1b6be3e" config-ref="Database_Config" >
			<db:sql ><![CDATA[INSERT INTO customers (name, last_name, date_of_birth, address, identity_card, date_of_creation)
VALUES (:name, :last_name, :date_of_birth, :address, :identity_card, :date_of_creation);]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
  name: payload.name,
  last_name: payload.last_name,
  date_of_birth: payload.date_of_birth,
  address: payload.address,
  identity_card: payload.identity_card,
  date_of_creation: now()
}]]]></db:input-parameters>
		</db:insert>
		<db:select doc:name="query para devolver o último customer inserido" doc:id="9782bde7-e0f0-4a86-87a0-f4810b70fadf" config-ref="Database_Config" >
			<db:sql ><![CDATA[SELECT MAX(id) AS maxid, CONCAT(name, " ", last_name) AS name
FROM customers
WHERE id = (SELECT MAX(id) FROM customers);
]]></db:sql>
		</db:select>
		<ee:transform doc:name="resposta da requisição" doc:id="c1d8a3ad-2a5c-4b9d-a103-8ac2fdd3e74b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---

{
	
id: payload.maxid[0],
name: payload.name[0]
	
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="get:\customer:tp2-sl-customer-xys-config_SubFlow" doc:id="a52bd592-2584-4390-8974-127c9c1879e5">
		<logger level="INFO" doc:name="Logger" doc:id="73bec4e7-7ac3-450e-a9f4-bc2bab156412" />
		<db:select doc:name="seleciona todos os costumers" doc:id="cc681920-a84b-4691-8eab-ffbf7ad241f3" config-ref="Database_Config">
			<db:sql><![CDATA[SELECT * FROM customers]]></db:sql>
		</db:select>
		<ee:transform doc:name="filtra os dados de todos os customers" doc:id="f505bc43-5eec-453e-baad-09246a783ff6">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---

payload map ((item, index) -> 
{
    name: item.name,
    last_name: item.last_name,
    date_of_birth: item.date_of_birth,
    address: item.address,
    identity_card: item.identity_card,
    date_of_creation: item.date_of_creation
})]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="get:\customer\(id):tp2-sl-customer-xys-config_SubFlow" doc:id="f4961f7d-0eb2-4718-962a-6093589bc75c">
		<logger level="INFO" doc:name="Logger" doc:id="68124b4e-eaf6-4de6-a25e-0d0b71fbfb75" message="ID value: #[vars.id]"/>
		<db:select doc:name="query para receber o customer especifico" doc:id="435d7018-2980-45f8-bd85-3b8be8cd6dfe" config-ref="Database_Config" >
			<db:sql ><![CDATA[SELECT *
FROM customers WHERE id = :id]]></db:sql>
			<db:input-parameters ><![CDATA[#[{id:vars.id}]]]></db:input-parameters>
		</db:select>
		<logger level="INFO" doc:name="Logger" doc:id="8f4ee532-54cd-4f34-8a8b-eecad2b92e59" message="ID value: #[vars.id]"/>
		<ee:transform doc:name="filtrar output e caso não exista, mostra que não foi encontrado" doc:id="0631ce86-556b-4e85-b3ef-2e0212bc4c81">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---

if (isEmpty(payload.date_of_creation)) 
{
  
    "message": "Cliente não encontrado"
  
}
else 
{
  
    "name": payload.name[0],
    "last_name": payload.last_name[0],
    "date_of_birth":payload.date_of_birth[0],
    "address": payload.address[0],
    "identity_card": payload.identity_card[0],
    "date_of_creation": payload.date_of_creation[0]
  
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="put:\customer\(id):application\json:tp2-sl-customer-xys-config_SubFlow" doc:id="b0dd6e98-b5be-4365-8105-3591cc3beff6">
		<logger level="INFO" doc:name="Logger" doc:id="0c421ee3-4c4c-428f-8d91-e66558c82609" />
		<db:stored-procedure doc:name="upsert com stored procedure, se não existir, cria, se existir, atualiza" doc:id="73fbb817-4ade-43fe-b8be-3507b9f11117" config-ref="Database_Config">
			<db:sql><![CDATA[CALL update_or_insert(
	:id, 
 	:name,
    :last_name,
    :date_of_birth,
 	:address,
  	:identity_card

)

]]></db:sql>
			<db:input-parameters><![CDATA[#[{
                'id': vars.id,
                'name': payload.name,
                'last_name': payload.last_name,
                'date_of_birth': payload.date_of_birth,
                'address': payload.address,
                'identity_card': payload.identity_card
             
            }]]]></db:input-parameters>
		</db:stored-procedure>
		<ee:transform doc:name="resposta da requisição" doc:id="4405778c-91cb-45fd-a289-58d3fe1a63b7">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---

{
"message": "Alteração à base de dados feita com sucesso",
"id": vars.id
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="patch:\customer\(id):application\json:tp2-sl-customer-xys-config_SubFlow" doc:id="240d9f4d-9935-4a9c-9d6c-17b78d0fb194">
		<logger level="INFO" doc:name="Logger" doc:id="1b136248-e485-4fbb-b472-4b002cb3f64e" />
		<db:update doc:name="ação de atualizaçao de recursos especificos na base de dados" doc:id="3d7cf788-d21a-40a5-a29c-e1f6482ba3b9" config-ref="Database_Config" autoGenerateKeys="true" >
			<db:sql ><![CDATA[#[vars.dados.query]]]></db:sql>
		</db:update>
	</sub-flow>
	<sub-flow name="delete:\customer\(id):tp2-sl-customer-xys-config_SubFlow" doc:id="df46fd64-2bc6-47e0-96eb-020b61ded219" >
		<logger level="INFO" doc:name="Logger" doc:id="b7eefacf-9215-40b5-b20d-c8bc5a0e0b01" />
		<db:delete doc:name="ação de delete na base de dados" doc:id="2daa0694-0303-4180-826e-2f467e4b1d5e" config-ref="Database_Config" >
			<db:sql ><![CDATA[DELETE FROM customers WHERE id = :id]]></db:sql>
			<db:input-parameters ><![CDATA[#[{id:vars.id}]]]></db:input-parameters>
		</db:delete>
	</sub-flow>
</mule>
